
--------------------------------------------------
Macros, old keywords, More pointers, and Printf
--------------------------------------------------

Content:
  Macros, Typedef, Function pointers
--------------------------------------------------
|
|
|
|
|
_________________
MACROS
****************
- An old C construct

    #define PI 3.14

- Allows you to give a name to something
- Very literal substituion
- Doesnt have a type
- Today it would be better to do as follows:
    - const int or const float inside a namespace or class -> This helps preventing name collision
- There's no type safety. There's just TEXT SUBSTITUTION

#define SQR(x) (x*x)
Here, theres no type. However, this would be a type a function. Jsut TEXT SUBSTITUTION

Bad example:  SQR(1+1) -> (1+1*1+1)
            This equals 3, and not the desired 4.

This doesnt evaluate the input parameter. Just replaces text.

We would do that today with a function, or a function template, if we need more than just one type

|
|
|
|
_________________
Typedef
****************

Gives name to something BUT ONLY FOR TYPES

Sets up a synonim that you could think as a type, but it is just a new name for an existing one.


example:
    typedef int BOOL; -> Before a type bool existed.


Why?
  * Make code more portable
  * For expressivity. Have more meaning in type names
  * Reduce typing or <> fear
    - typedef std::vector<int> VectorOfInt


|
|
|
|
_________________
Function pointers 
****************


.
